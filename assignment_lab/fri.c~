#include <stdio.h>

#include <stdlib.h>

#include<sys/types.h>

#include<sys/socket.h>

#include<netdb.h>

#include<string.h>

int main(int argc, char *argv[])

{

 

//parsing the url into hostname and path

char hostname[1000],pathname[1000],dtm[1000];

strcpy(dtm,argv[1]);

sscanf(dtm,"http://%[^/]/%s",hostname,pathname);

 

printf("\n\nhostname is %s\n", hostname);

printf("\npathname is %s\n", pathname);

 

int port=80;

int sockfd;

 

//struct hostent *gethostbyname(const char *name); //to get gethostbyname

printf("Client program\n");

 

//checking if the argumet 3 is port number or not

if(argc!=2){

printf("Usage : %s <url>\n", argv[1]);

exit(0);

}

 

 

printf("\nServername = %s, port=%d", hostname,port);

 

//creating socket

sockfd= socket(AF_INET, SOCK_STREAM, 0);

if(sockfd < 0){

perror("not valid");

exit(1);

}

 


 

//connection to server declaration

struct sockaddr_in serveraddr;//store the server address

 

//prepare to copy: clear sockaddr_in structure

bzero((char *) &serveraddr, sizeof(serveraddr));

 

//set the family to AF_NET(IPv4)

serveraddr.sin_family = AF_INET;

 

//copy the serverâ€™ address from gethostbyname(..),

//return in struct hostent (stored in *server_he)

bcopy((char *)server_he->h_addr,

(char *)&serveraddr.sin_addr.s_addr,

server_he->h_length);

 


//set the port number

serveraddr.sin_port=htons(port);

 
//a host address entry

struct hostent *server_he;

if((server_he = gethostbyname(hostname)) == NULL){

perror("error in gethostbyname");

return 2;

}

//connection to server

 

if(connect(sockfd, (struct sockaddr *) &serveraddr, sizeof(serveraddr))< 0){

 

perror("Cannot connect to the server");

exit(0);

}

else

printf("Connected to the server\n");

 

//HTTP Request

 

char request[255];

 

sprintf(request,"GET /%s HTTP/1.0\r\nHost: %s\r\n\r\n",pathname,hostname);

 

 

char str[80];

char *host=pathname;

sprintf(str, "Host: %s\r\n\r\n",host);

 

 

//for sending the data

 

int bytes_sent;

bytes_sent=send(sockfd, request, strlen(request),0);

 

//recieving the data

int byte_received;

char buffer[10000];

bzero(buffer, 10000); //to make sure that the buffer is empty, buffer is just a space to store the message and 1024 is the size of it

byte_received= recv(sockfd,buffer,10000,0);

if(byte_received<0){

error("ERROR reading from the socket");}

 

 

 

 

//calculating the index of O to ensure that the status is 200 OK

char *e;

int index;

e = strchr(buffer, 'O');

index = (int)(e - buffer);

 

char *ret;

ret = strstr(buffer,"\r\n\r\n");

 

if(index == 13)

{

 

         

 

          //printing only the data part in buffer

          printf("\nThe data part of the message recieved is:\n%s\n", ret+4);

 

          //getting the filename for the text file

          const char ch = '/';

          char *ret1;

          ret1 = strrchr(pathname, ch);

 

          if(ret1 != NULL)

          {

         

          FILE *fptr;

          fptr = fopen(ret1+1, "w");

 

         

          if(fptr == NULL)

          {

                printf("file opening error 2");

                exit(1);

          }

            

          int bytes_left = byte_received-((ret-buffer)+4);

          fwrite(ret+4, bytes_left,1,fptr);

          while((byte_received=recv(sockfd,buffer,10000,0))!=0) {

 

           fwrite(buffer,byte_received,1,fptr);

           

          }

 

          fclose(fptr);

 

          }

 

 

          else{

          //writing the contents into the file with filename as pathname

          FILE *fp;

         

          fp = fopen(pathname, "w");

 

          if(fp == NULL)

          {

                printf("\nfile opening error\n");

                exit(1);

          }

            

          int bytes_left = byte_received-((ret-buffer)+4);

          fwrite(ret+4, bytes_left,1,fp);

          while((byte_received=recv(sockfd,buffer,10000,0))!=0) {

 

           fwrite(buffer,byte_received,1,fp);

           

          }

 

          fclose(fp);

         

          }

}

 

else{

 

//printing the entire buffer as the status is not 200 OK

printf("\nThe message recieved is: %s", buffer);

 

printf("The status is not 200 OK, so the content is not copied into a file\n\n");

 

char *f;

int index1;

f = strchr(buffer, '\n');

index1 = (int)(f - buffer);

 

char *statusmsg=(char *) malloc(100);

strncpy(statusmsg, buffer+9,index1);

 

printf("Status message is : %s\n\n",statusmsg);

 

}

 

return 0;

}
